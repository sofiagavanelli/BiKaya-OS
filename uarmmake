# Cross toolchain variables
# If these are not in your path, you can make them absolute.
XT_PRG_PREFIX = arm-none-eabi-
CC = $(XT_PRG_PREFIX)gcc
LD = $(XT_PRG_PREFIX)ld

# uARM-related paths
UARM_DIR = uarm
INCLUDE_DIR = include

# Compiler options
CFLAGS_LANG = 
CFLAGS_UARM = -mcpu=arm7tdmi -DTARGET_UARM=1
CFLAGS = $(CFLAGS_LANG) $(CFLAGS_UARM) -I$(UARM_DIR) -I$(UARM_DIR)/uarm -I$(INCLUDE_DIR) -Wall -O0

# Linker options
LDFLAGS = -G 0 -nostdlib -T $(UARM_DIR)/elf32ltsarm.h.uarmcore.x

# Add the location of crt*.S to the search path
VPATH = $(UARM_DIR)

.PHONY : all clean

# target directory
UARM = uarm_obj

# source modules
src = main.c scheduler.c p2test_bikaya_v0.2.c handler.c syscall.c interrupt.c asl.c pcb.c
objects = $(patsubst %.c, $(UARM)/%.o, $(src))

# assembly modules
asm = crtso.s libuarm.s libdiv.s 
assembly = $(patsubst %.s, $(UARM)/%.o, $(asm))

#controllo della presenza del comando elf2uarm 
ifeq ($(wildcard /usr/bin/elf2uarm),)
    core = $(UARM)/kernel
else
    core = $(UARM)/kernel.core.uarm
endif

all: create $(core)

create:
ifeq ("$(wildcard $(UARM))","")
	-mkdir $(UARM)
endif

$(objects): $(UARM)/%.o : %.c 
	$(CC) $(CFLAGS) -c -o $@ $< 

$(assembly): $(UARM)/%.o : %.s
	$(CC) $(CFLAGS) -c -o $@ $< 
	
$(UARM)/kernel.core.uarm: $(UARM)/kernel 
	elf2uarm -k $<

$(UARM)/kernel : $(assembly) $(objects)
	$(LD) $(LDFLAGS) $^ -o $@ 

clean:
ifneq ("$(wildcard $(UARM))","")
	-rm $(UARM)/*
	-rmdir $(UARM)
endif 

